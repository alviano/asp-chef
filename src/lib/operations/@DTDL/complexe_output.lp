dtdl_interface("dtmi:agriculture:vineyard:VineyardProperty;1"). displayName("dtmi:agriculture:vineyard:VineyardProperty;1", "Vineyard Property"). property("dtmi:agriculture:vineyard:VineyardProperty;1", "name", "string"). property_description("dtmi:agriculture:vineyard:VineyardProperty;1", "name", Name of the wine property). property_writable("dtmi:agriculture:vineyard:VineyardProperty;1", "name"). property("dtmi:agriculture:vineyard:VineyardProperty;1", "owner", "string"). property_description("dtmi:agriculture:vineyard:VineyardProperty;1", "owner", Owner of the wine business). property_writable("dtmi:agriculture:vineyard:VineyardProperty;1", "owner"). property("dtmi:agriculture:vineyard:VineyardProperty;1", "totalArea", "double"). property_description("dtmi:agriculture:vineyard:VineyardProperty;1", "totalArea", Total area of the property in hectares). property_writable("dtmi:agriculture:vineyard:VineyardProperty;1", "totalArea"). property("dtmi:agriculture:vineyard:VineyardProperty;1", "elevation", "double"). property_description("dtmi:agriculture:vineyard:VineyardProperty;1", "elevation", Average elevation of the property). property_writable("dtmi:agriculture:vineyard:VineyardProperty;1", "elevation"). property("dtmi:agriculture:vineyard:VineyardProperty;1", "location", "complex_location"). property_description("dtmi:agriculture:vineyard:VineyardProperty;1", "location", Geographic coordinates of the property). property_writable("dtmi:agriculture:vineyard:VineyardProperty;1", "location"). schema_object("schema_8ul7h9y"). object_field("schema_8ul7h9y", "latitude", "double"). object_field("schema_8ul7h9y", "longitude", "double"). relationship("dtmi:agriculture:vineyard:VineyardProperty;1", "hasVineyardPlots", "dtmi:agriculture:vineyard:VineyardPlot;1"). maxMultiplicity("dtmi:agriculture:vineyard:VineyardProperty;1", "hasVineyardPlots", 100). writable_relationship("dtmi:agriculture:vineyard:VineyardProperty;1", "hasVineyardPlots"). relationship("dtmi:agriculture:vineyard:VineyardProperty;1", "hasWeatherStation", "dtmi:agriculture:vineyard:WeatherStation;1"). maxMultiplicity("dtmi:agriculture:vineyard:VineyardProperty;1", "hasWeatherStation", 1). writable_relationship("dtmi:agriculture:vineyard:VineyardProperty;1", "hasWeatherStation"). relationship("dtmi:agriculture:vineyard:VineyardProperty;1", "hasWinery", "dtmi:agriculture:vineyard:Winery;1"). maxMultiplicity("dtmi:agriculture:vineyard:VineyardProperty;1", "hasWinery", 1). writable_relationship("dtmi:agriculture:vineyard:VineyardProperty;1", "hasWinery"). dtdl_interface("dtmi:agriculture:vineyard:PestTrap;1"). displayName("dtmi:agriculture:vineyard:PestTrap;1", "Pest Trap"). property("dtmi:agriculture:vineyard:PestTrap;1", "trapId", "string"). property_description("dtmi:agriculture:vineyard:PestTrap;1", "trapId", Unique identifier of the trap). property("dtmi:agriculture:vineyard:PestTrap;1", "targetPest", "string"). property_description("dtmi:agriculture:vineyard:PestTrap;1", "targetPest", Type of pest this trap is designed to catch). property_writable("dtmi:agriculture:vineyard:PestTrap;1", "targetPest"). property("dtmi:agriculture:vineyard:PestTrap;1", "installationDate", "dateTime"). property_description("dtmi:agriculture:vineyard:PestTrap;1", "installationDate", Date when the trap was installed). property_writable("dtmi:agriculture:vineyard:PestTrap;1", "installationDate"). property("dtmi:agriculture:vineyard:PestTrap;1", "batteryLevel", "double"). property_description("dtmi:agriculture:vineyard:PestTrap;1", "batteryLevel", Current battery level of the trap). relationship("dtmi:agriculture:vineyard:PestTrap;1", "installedIn", "dtmi:agriculture:vineyard:VineyardPlot;1"). maxMultiplicity("dtmi:agriculture:vineyard:PestTrap;1", "installedIn", 1). writable_relationship("dtmi:agriculture:vineyard:PestTrap;1", "installedIn"). telemetry("dtmi:agriculture:vineyard:PestTrap;1", "pestCount", "integer"). telemetry("dtmi:agriculture:vineyard:PestTrap;1", "lastCaptureTime", "dateTime"). command("dtmi:agriculture:vineyard:PestTrap;1", "resetCount"). command("dtmi:agriculture:vineyard:PestTrap;1", "captureImage"). command_response("dtmi:agriculture:vineyard:PestTrap;1", "captureImage", "result", "complex_result"). schema_object("schema_ppcluuc"). object_field("schema_ppcluuc", "success", "boolean"). object_field("schema_ppcluuc", "imageId", "string"). dtdl_interface("dtmi:agriculture:vineyard:SoilMoistureSensor;1"). displayName("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "Soil Moisture Sensor"). property("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "sensorId", "string"). property_description("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "sensorId", Unique identifier of the soil sensor). property("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "installationDepth", "double"). property_description("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "installationDepth", Depth at which the sensor is installed). property_writable("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "installationDepth"). property("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "installationDate", "dateTime"). property_description("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "installationDate", Date when the sensor was installed). property_writable("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "installationDate"). property("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "batteryLevel", "double"). property_description("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "batteryLevel", Current battery level of the sensor). relationship("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "installedIn", "dtmi:agriculture:vineyard:VineyardPlot;1"). maxMultiplicity("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "installedIn", 1). writable_relationship("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "installedIn"). telemetry("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "soilMoisture", "double"). telemetry("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "soilTemperature", "double"). telemetry("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "nitrogenLevel", "double"). telemetry("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "pHLevel", "double"). command("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "calibrate"). command("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "setSamplingRate"). command_request("dtmi:agriculture:vineyard:SoilMoistureSensor;1", "setSamplingRate", "rate", "integer"). dtdl_interface("dtmi:agriculture:vineyard:IrrigationController;1"). displayName("dtmi:agriculture:vineyard:IrrigationController;1", "Irrigation Controller"). property("dtmi:agriculture:vineyard:IrrigationController;1", "controllerId", "string"). property_description("dtmi:agriculture:vineyard:IrrigationController;1", "controllerId", Unique identifier of the irrigation controller). property("dtmi:agriculture:vineyard:IrrigationController;1", "model", "string"). property_description("dtmi:agriculture:vineyard:IrrigationController;1", "model", Model of the irrigation controller). property_writable("dtmi:agriculture:vineyard:IrrigationController;1", "model"). property("dtmi:agriculture:vineyard:IrrigationController;1", "installationDate", "dateTime"). property_description("dtmi:agriculture:vineyard:IrrigationController;1", "installationDate", Date when the controller was installed). property_writable("dtmi:agriculture:vineyard:IrrigationController;1", "installationDate"). property("dtmi:agriculture:vineyard:IrrigationController;1", "waterSource", "string"). property_description("dtmi:agriculture:vineyard:IrrigationController;1", "waterSource", Source of water for irrigation). property_writable("dtmi:agriculture:vineyard:IrrigationController;1", "waterSource"). property("dtmi:agriculture:vineyard:IrrigationController;1", "operatingStatus", "complex_operatingStatus"). property_description("dtmi:agriculture:vineyard:IrrigationController;1", "operatingStatus", Current operational status of the controller). property_writable("dtmi:agriculture:vineyard:IrrigationController;1", "operatingStatus"). schema_enum("schema_gmvneau", "string"). enum_value("schema_gmvneau", "operational", "operational"). enum_value("schema_gmvneau", "maintenance", "maintenance"). enum_value("schema_gmvneau", "error", "error"). enum_value("schema_gmvneau", "disabled", "disabled"). relationship("dtmi:agriculture:vineyard:IrrigationController;1", "controlsPlot", "dtmi:agriculture:vineyard:VineyardPlot;1"). maxMultiplicity("dtmi:agriculture:vineyard:IrrigationController;1", "controlsPlot", 10). writable_relationship("dtmi:agriculture:vineyard:IrrigationController;1", "controlsPlot"). relationship("dtmi:agriculture:vineyard:IrrigationController;1", "connectedSensors", "dtmi:agriculture:vineyard:SoilMoistureSensor;1"). maxMultiplicity("dtmi:agriculture:vineyard:IrrigationController;1", "connectedSensors", 20). writable_relationship("dtmi:agriculture:vineyard:IrrigationController;1", "connectedSensors"). telemetry("dtmi:agriculture:vineyard:IrrigationController;1", "waterFlow", "double"). telemetry("dtmi:agriculture:vineyard:IrrigationController;1", "totalWaterUsed", "double"). telemetry("dtmi:agriculture:vineyard:IrrigationController;1", "lastIrrigationTime", "dateTime"). command("dtmi:agriculture:vineyard:IrrigationController;1", "startIrrigation"). command_request("dtmi:agriculture:vineyard:IrrigationController;1", "startIrrigation", "duration", "integer"). command("dtmi:agriculture:vineyard:IrrigationController;1", "stopIrrigation"). command("dtmi:agriculture:vineyard:IrrigationController;1", "scheduleIrrigation"). command_request("dtmi:agriculture:vineyard:IrrigationController;1", "scheduleIrrigation", "schedule", "complex_schedule"). schema_object("schema_gweo7v7"). object_field("schema_gweo7v7", "startTime", "dateTime"). object_field("schema_gweo7v7", "duration", "integer"). object_field("schema_gweo7v7", "plotIds", "complex_plotIds"). schema_array("schema_0b5is3j", "string"). dtdl_interface("dtmi:agriculture:vineyard:GrapeMonitor;1"). displayName("dtmi:agriculture:vineyard:GrapeMonitor;1", "Grape Monitor"). property("dtmi:agriculture:vineyard:GrapeMonitor;1", "monitorId", "string"). property_description("dtmi:agriculture:vineyard:GrapeMonitor;1", "monitorId", Unique identifier of the grape monitor). property("dtmi:agriculture:vineyard:GrapeMonitor;1", "grapeVariety", "string"). property_description("dtmi:agriculture:vineyard:GrapeMonitor;1", "grapeVariety", Variety of grapes being monitored). property_writable("dtmi:agriculture:vineyard:GrapeMonitor;1", "grapeVariety"). property("dtmi:agriculture:vineyard:GrapeMonitor;1", "installationDate", "dateTime"). property_description("dtmi:agriculture:vineyard:GrapeMonitor;1", "installationDate", Date when the monitor was installed). property_writable("dtmi:agriculture:vineyard:GrapeMonitor;1", "installationDate"). property("dtmi:agriculture:vineyard:GrapeMonitor;1", "batteryLevel", "double"). property_description("dtmi:agriculture:vineyard:GrapeMonitor;1", "batteryLevel", Current battery level of the monitor). property("dtmi:agriculture:vineyard:GrapeMonitor;1", "cameraResolution", "string"). property_description("dtmi:agriculture:vineyard:GrapeMonitor;1", "cameraResolution", Resolution of the integrated camera). property_writable("dtmi:agriculture:vineyard:GrapeMonitor;1", "cameraResolution"). relationship("dtmi:agriculture:vineyard:GrapeMonitor;1", "monitoringPlot", "dtmi:agriculture:vineyard:VineyardPlot;1"). maxMultiplicity("dtmi:agriculture:vineyard:GrapeMonitor;1", "monitoringPlot", 1). writable_relationship("dtmi:agriculture:vineyard:GrapeMonitor;1", "monitoringPlot"). telemetry("dtmi:agriculture:vineyard:GrapeMonitor;1", "berrySize", "double"). telemetry("dtmi:agriculture:vineyard:GrapeMonitor;1", "sugarContent", "double"). telemetry("dtmi:agriculture:vineyard:GrapeMonitor;1", "acidity", "double"). telemetry("dtmi:agriculture:vineyard:GrapeMonitor;1", "colorIndex", "double"). telemetry("dtmi:agriculture:vineyard:GrapeMonitor;1", "estimatedHarvestDate", "dateTime"). command("dtmi:agriculture:vineyard:GrapeMonitor;1", "captureImage"). command_response("dtmi:agriculture:vineyard:GrapeMonitor;1", "captureImage", "result", "complex_result"). schema_object("schema_0ev8mlq"). object_field("schema_0ev8mlq", "success", "boolean"). object_field("schema_0ev8mlq", "imageId", "string"). command("dtmi:agriculture:vineyard:GrapeMonitor;1", "analyzeSamples"). command("dtmi:agriculture:vineyard:GrapeMonitor;1", "updateAIModel"). valid_twin(TwinId, InterfaceId) :- dtdl_interface(InterfaceId), twin_type(TwinId, InterfaceId), check_required_properties(TwinId, InterfaceId). check_required_properties(TwinId, InterfaceId) :- property(InterfaceId, PropName, _), has_property(TwinId, PropName, _). valid_relationship(SourceId, TargetId, RelName) :- relationship(InterfaceId, RelName, TargetInterfaceId), twin_type(SourceId, InterfaceId), twin_type(TargetId, TargetInterfaceId), has_relationship(SourceId, RelName, TargetId). implements(TwinId, SuperInterfaceId) :- twin_type(TwinId, InterfaceId), extends(InterfaceId, SuperInterfaceId). implements(TwinId, SuperInterfaceId) :- implements(TwinId, InterfaceId), extends(InterfaceId, SuperInterfaceId).